# yaml-language-server: $schema=https://coderabbit.ai/integrations/schema.v2.json
language: es-ES
tone_instructions: >
  Usa un tono claro y directo. Señala problemas específicos y ofrece soluciones concretas. 
  Sé preciso y evita ambigüedades. 
  Proporciona sugerencias útiles para mejorar el código de forma rápida y efectiva, enfocándote en la calidad.
early_access: true
enable_free_tier: true
reviews:
  profile: assertive
  request_changes_workflow: true
  high_level_summary: true
  high_level_summary_placeholder: '@coderabbitai summary'
  auto_title_placeholder: '@coderabbitai'
  review_status: false
  poem: true
  collapse_walkthrough: false
  sequence_diagrams: true
  changed_files_summary: true
  labeling_instructions: []
  path_filters:
    - '!dist/**'
    - '!**/*.app'
  path_instructions:
    - path: '**/styles.ts'
      instructions: >-
        1. **Alias para componentes estilizados**:  
           Cuando se quiera estilizar un componente importado cuyo nombre coincide con el del componente 
           a estilizar, debe crearse un alias añadiendo una barra baja al final del nombre del componente importado. 
           Este alias debe ser utilizado en el archivo de estilos para evitar conflictos de nombres.  
           Ejemplo:  
           ```typescript
           import { Button as Button_ } from '@taxdown/piccolo';

           const Button = styled(Button_)`
             /* Estilos */
           `;
           ```

        2. **Uso de tokens del theme**:  
           Verifica que se usen correctamente los tokens de la librería `Piccolo` para tamaños, colores, 
           espaciados y demás elementos de diseño, desestructurando los valores desde `theme`.  
           Ejemplo:  
           ```typescript
           height: ${({ theme: { sizing } }) => sizing.fds_size_16};
           width: ${({ theme: { sizing } }) => sizing.fds_size_16};
           color: ${({ theme: { colors } }) => colors.green_600};
           padding: ${({ theme: { spacing } }) => `${spacing.spacing_08} ${spacing.spacing_16}`};
           ```

        3. **Props custom con el prefijo `$`**:  
           Todas las props utilizadas exclusivamente para estilizar componentes deben llevar el prefijo `$` 
           solo si son usadas en componentes estilizados importados desde `./styles`. Esto asegura que no se asocien 
           a elementos HTML nativos.  
           Ejemplo:  
           ```typescript
           <Styled.Button $mode={mode} />

           export const Button = styled.button<StyleButtonProps>`
             ${({ $mode }) => buttonModeStyles[$mode]}
           `;
           ```

        4. **Media queries por componente**:  
           Cada componente debe ser adaptativo mediante el uso de media queries. Sigue los tamaños 
           estándar para dispositivos móviles y tabletas.  
           Ejemplo:  
           ```typescript
           export const MOBILE_EXTRA_SMALL_WIDTH = '320px';
           export const MOBILE_SMALL_WIDTH = '375px';
           export const MOBILE_MEDIUM_WIDTH = '425px';
           export const MOBILE_WIDTH = '600px';
           export const TABLET_WIDTH = '768px';
           export const DESKTOP_EXTRA_SMALL_WIDTH = '900px';
           export const DESKTOP_SMALL_WITDH = '1024px';
           export const DESKTOP_WITDH = '1200px';
           ```

           ```typescript
           export const RadioContent = styled.div`
             @media screen and (max-width: ${MOBILE_WIDTH}) {
               max-width: 100%;
             }
           `;
           ```

        5. **Uso correcto de Grid y Flex**:  
           Utiliza `flex` para distribuciones simples y `grid` para estructuras más complejas, combinándolos 
           cuando sea necesario.  
           Ejemplo de Grid:  
           ```typescript
           export const PlanContent = styled.div`
             display: grid;
             grid-template-columns: 2fr 1fr;
             gap: ${({ theme: { spacing } }) => spacing.spacing_08};
           `;
           ```

        6. **Estilizado de componentes importados**:  
           Si se necesita aplicar estilos a un componente importado, encapsúlalo usando `styled` para personalizar su apariencia.  
           Ejemplo:  
           ```typescript
           import { Text } from '@taxdown/piccolo-web';

           export const TierText = styled(Text)`
             color: ${({ plan }) => plansTexColors[plan]};
           `;
           ```

    - path: '**/index.tsx'
      instructions: >-
        1. **Props custom con el prefijo `$`**:  
           Asegúrate de que las props utilizadas para estilizar los componentes sigan la convención `$prop` para evitar conflictos con props HTML nativas.  
           Ejemplo:  
           ```typescript
           <Styled.Button $mode={mode} />

           export const Button = styled.button<StyleButtonProps>`
             ${({ $mode }) => buttonModeStyles[$mode]}
           `;
           ```

        2. **Separación de responsabilidades**:  
           Si el archivo `index.tsx` excede las 120 líneas, divide la lógica en otros archivos como `view.tsx` y `types.ts`.

        3. **Uso de `JSX.Element`**:  
           Asegúrate de que los componentes funcionales devuelvan explícitamente `JSX.Element`.  
           Ejemplo:  
           ```typescript
           const Button = (props: ButtonProps): JSX.Element => { ... };
           ```

        4. **Manejo de eventos**:  
           Sigue la nomenclatura `handleOnEvent` para los eventos y asegura que los nombres de variables y funciones sean lo más descriptivos posibles.  
           Ejemplo:  
           ```typescript
           const handleOnClick = (e: React.MouseEvent<HTMLButtonElement>): void => { ... };
           ```

    - path: '**/*.hooks.ts'
      instructions: >-
        1. **Nomenclatura**:  
           Todos los hooks deben comenzar con `use`.

        2. **Manejo de side-effects**:  
           Verifica que los side-effects se manejen adecuadamente con `useEffect` o `useLayoutEffect` y que se utilicen correctamente las dependencias.

        3. **Reutilización**:  
           Los hooks deben abstraer lógica repetitiva o compleja y ser reutilizables en varios componentes.

    - path: '**/*.types.ts'
      instructions: >-
        1. **Tipado claro y descriptivo**:  
           Los tipos y las interfaces deben ser lo más descriptivos posibles y las props de los componentes deben llevar el sufijo `Props`.

        2. **Manejo de tipos reutilizables**:  
           Asegúrate de que los tipos reutilizables estén centralizados y no duplicados.

        3. **Tipado explícito**:  
           Evita el uso de `any`. Utiliza tipos estrictos y explícitos.

    - path: '**/constants/*'
      instructions: >-
        1. **Uso de nombres en MAYÚSCULAS**:  
           Las constantes deben estar en mayúsculas y separadas por guiones bajos.

        2. **Centralización de rutas y claves**:  
           Evita valores hardcodeados y centraliza las rutas y claves que se cambien frecuentemente.

    - path: '**/containers/**/*.tsx'
      instructions: >-
        1. **Organización por ruta**:  
           Verifica que cada container esté asociado correctamente con la ruta correspondiente y maneje correctamente la lógica de estado y presentación.

        2. **Separación de componentes**:  
           Si un container tiene más de cuatro subcomponentes, deben estar en directorios separados con un `index.tsx` para facilitar las importaciones.

        3. **Pruebas de integración**:  
           Asegúrate de que se realicen pruebas de integración para los containers.

    - path: '**/*.spec.tsx'
      instructions: >-
        1. **Uso adecuado de describe y test**:  
           Utiliza `describe` para agrupar pruebas y `test` o `it` para casos específicos.

        2. **Cobertura de pruebas**:  
           Verifica que cubran tanto casos de éxito como de fallo.

        3. **Uso de `test-config`**:  
           Asegúrate de que se utilicen las configuraciones globales necesarias para el contexto.

        4. **Pruebas de snapshots**:  
           Usa pruebas de snapshot para verificar cambios inesperados en el UI.
      
  abort_on_close: true
  auto_review:
    enabled: true
    auto_incremental_review: true
    ignore_title_keywords:
      - release
    labels: []
    drafts: false
    base_branches: []
  tools:
    shellcheck:
      enabled: true
    ruff:
      enabled: true
    markdownlint:
      enabled: true
    github-checks:
      enabled: true
      timeout_ms: 90000
    languagetool:
      enabled: true
      enabled_only: false
      level: default
      disabled_rules:
        - EN_UNPAIRED_BRACKETS
        - EN_UNPAIRED_QUOTES
      disabled_categories:
        - TYPOS
        - TYPOGRAPHY
        - CASING
    biome:
      enabled: true
    hadolint:
      enabled: true
    swiftlint:
      enabled: true
    phpstan:
      enabled: true
      level: default
    golangci-lint:
      enabled: true
    yamllint:
      enabled: true
    gitleaks:
      enabled: true
    checkov:
      enabled: true
    detekt:
      enabled: true
    eslint:
      enabled: true
    rubocop:
      enabled: true
    buf:
      enabled: true
    regal:
      enabled: true
    actionlint:
      enabled: true
    pmd:
      enabled: true
    cppcheck:
      enabled: true
    semgrep:
      enabled: true
    circleci:
      enabled: true
chat:
  auto_reply: true
knowledge_base:
  opt_out: false
  learnings:
    scope: auto
  issues:
    scope: auto
  jira:
    project_keys: []
  linear:
    team_keys: []
  pull_requests:
    scope: auto
